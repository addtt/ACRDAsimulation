[General]
network = Acrda
sim-time-limit = 18s
#repeat=3
seed-set = ${1}  #${2..6 ! sf}
#debug-on-errors = true
#record-eventlog = true

Acrda.numHosts = 40
Acrda.nRep = ${2}
Acrda.arrivalType = "POISSON"   # POISSON, HEAVY_TRAFFIC, EXTERNAL
Acrda.nSlots = ${nSlots = 12}
Acrda.tPkt = 1ms    # tx time for one packet without spreading code
Acrda.server.numIterIC = 8

# Ugly workaround to set simulation time limit. Set the constant at the end as desired.
Acrda.server.simTimeLimitDouble =  ${nSlots} * ${sf} / ${meanInterarr} * 80

# 
Acrda.host[*].defaultSpreadingFactor = ${sf = 4}
Acrda.server.maxSpreadingFactor = ${sf}
# The max spreading factor should be the max SF of all the hosts. It is used to scale the
# receive window, since the frame length at each hosts is proportional to its SF.

# Window-related quantities are normalized to the maximum frame length among all hosts, i.e. the
# frame size at the receiver, which is
# (maxSpreadingFactor * Tpacket * Nslots) seconds
Acrda.server.wndLengthNorm = 3
Acrda.server.wndShiftNorm = 0.5


Acrda.host[*].radioDelay = 250ms
Acrda.host[*].meanInterarr = ${meanInterarr = 5} ms #${100, 50, 33.33, 25, 20, 16.66, 12.5, 10, 5}ms 	# avg ia Time
Acrda.host[*].randExpUnity = exponential(1s)  # exponential generator with mean 1
# expected offered load = numHosts / meanInterarr

Acrda.server.sinrThresh_dB = -1
#Acrda.host[*].randSnrDistrib = exponential(1)
Acrda.host[*].randSnrDistrib = sqrt(gamma_d(3, 1/3)) / 0.95937	# Nakagami(3, 1) divided by its average
Acrda.host[*].randSnrDistribStr = "Nakagami(3;1) with avg 1"
# m = 3, Omega = 1
# Nakagami(m, Omega) is obtained by Gamma(k, theta) with:
#   k = m
#   theta = Omega / m
# and finally take the sqrt.

Acrda.host[*].defaultAvgSnrLinear = 1 # 0dB
